---
version: '3'

networks:
  kafka_dev_sandbox:
    driver: bridge

services:

  # The ZooKeeper node
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok"
    extra_hosts:
      - "moby:127.0.0.1"
    networks:
      - kafka_dev_sandbox
    #volumes:
    #  - "./kafka-connect-envcfg/zkhealthcheck:/opt/zkhealthcheck"
    healthcheck:
      test: ["CMD", "/opt/zkhealthcheck"]
      interval: 30s
      timeout: 10s
      retries: 4
    labels:
      kafka.sandbox.container.type: "zookeeper"
  # The Kafka broker
  # Duplicate this service to spin up more Kafka brokers
  kafka1:
    image: confluentinc/cp-kafka:latest
    #image: confluentinc/cp-enterprise-kafka:latest
    hostname: kafka1
    container_name: kafka1
    ports:
      - "29092:29092"
      - "39998:39998"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092, PLAINTEXT_HOST://localhost:29092 #PLAINTEXT_HOST://${HOST_IP}:29092
      # Confluent Metrics Reporter.
      # CONFLUENT_METRICS_ENABLE: 'false'
      # CONFLUENT_METRICS_ENABLE: 'true'
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    #volumes:
      #- ./prometheus:/opt/prometheus:ro
    # Comment out the command below to disable prometheus jmx exporter
    # command: '/etc/confluent/docker/run KAFKA_OPTS="-javaagent:/opt/prometheus/jmx_prometheus_javaagent.jar=39998:/opt/prometheus/kafka-prom-jmx-agent-config.yml"'
    extra_hosts:
      - "moby:127.0.0.1"
    networks:
      - kafka_dev_sandbox
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka1:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      kafka.sandbox.container.type: "kafka"

  # Confluent Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
    extra_hosts:
      - "moby:127.0.0.1"
    networks:
      - kafka_dev_sandbox
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      kafka.sandbox.container.type: "schema-registry"

  connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: connect
    links:
      - zookeeper
      - kafka1
      - schema-registry
    hostname: connect
    ports:
      - "8083:8083"
      - "39999:39999"
    restart: unless-stopped
    environment:
      # The hostname + port for accessing the Kafka cluster. See Confluent Cloud dashboard for details.
      CONNECT_BOOTSTRAP_SERVERS: kafka1:9092
      # Misc Kafka configs
      CONNECT_REQUEST_TIMEOUT_MS: 2000
      CONNECT_RETRY_BACKOFF_MS: 500
      # The hostname that the client USES to get access to the REST API
      # (if accessing via a proxy, the proxy hostname should be used)
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      # The port where the REST API will be exposed
      CONNECT_REST_PORT: 8083
      # Specify the groupId to use for the connect worker/cluster
      CONNECT_GROUP_ID: sandbox
      # Specify topics to use for connector related data
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      # Specify default key and value converters to use
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      # Schema registry URLs for keys and values. See Confluent Cloud dashboard for details.
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # The internal key/value converters
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # Consumer configs
      CONNECT_CONSUMER_REQUEST_TIMEOUT_MS: 2000
      CONNECT_CONSUMER_RETRY_BACKOFF_MS: 500
      CONNECT_CONSUMER_BOOTSTRAP_SERVERS: kafka1:9092
      # Producer configs
      CONNECT_PRODUCER_REQUEST_TIMEOUT_MS: 2000
      CONNECT_PRODUCER_RETRY_BACKOFF_MS: 500
      CONNECT_PRODUCER_BOOTSTRAP_SERVERS: kafka1:9092
      #CONNECT_PRODUCER_COMPRESSION_TYPE: snappy
      # The path where connectors are downloaded from confluent-hub,
      # or added via docker volume mounts.
      CONNECT_PLUGIN_PATH: '/usr/share/confluent-hub-components'
      # Confluent metrics reporter
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      # Set sensible default log levels
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: "org.apache.zookeeper=ERROR,org.reflections=ERROR,org.I0Itec.zkclient=ERROR,com.github.jcustenborder=WARN"
      # Comment out below to disable prometheus jmx exporter
      # KAFKA_OPTS: -javaagent:/opt/prometheus/jmx_prometheus_javaagent.jar=39999:/opt/prometheus/connect-prom-jmx-agent-config.yml
    extra_hosts:
      - "moby:127.0.0.1"
    networks:
      - kafka_dev_sandbox
    #volumes:
    #  - ./kafka-connect-data:/opt/kafka-connect-data
     # - ./prometheus:/opt/prometheus:ro
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt kaliy/kafka-connect-rss:0.1.0
        /etc/confluent/docker/run
    labels:
      kafka.sandbox.container.type: "kafka-connect"

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - kafka1
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: Broker1
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
    networks:
      - kafka_dev_sandbox
